if (typeof cardsData === 'undefined'){
    var cardsData = [
        {
            projectName: 'PDF-Describer',
            description: 'Python app that takes data from CSV file and inserts it to PDF file',
            details: `PDF-Describer is a simple Python app, created to automatize some tasks that I often performed in one of my previous jobs as a Process Engineer.
            <br><br>
            It takes data from CSV file generated by the IPOsystem (Intelligent Production Organizing system) and inserts it to technical documentation in PDF file in a certain way.
            <br><br>
            The app saves from 20 minutes up to even 2 hours per project, depending on the project's size and complexity ('project' should be understood as a construction intended to be produced). I estimate that the <u>app saves cumulatively about 50-55 hours per month on average</u> in the department. It was successfully implemented and is still used.
            <br><br>
            PDF-Describer combines Python code (for GUI and functionality) with some VBA macros that are automatically ran during app's execution.
            <br>
            Because the application has been sold, the code cannot be shared.`,
            status: 'closed',
            tech: 'Python, VBA',
            github: '',
            img: ['https://drive.google.com/uc?export=view&id=1CEd3jC-t0sEzBsMOxdfDKC3PRZOsxUeJ'],
            show: true
        },
        {
            projectName: 'TechCreator',
            description: 'WPF app that simplifies creating production schemas for IPOsystem (Intelligent Prodcution Organizing system)',
            details: `TechCreator is a WPF app created to simplify creation of technology schemas for IPOsystem (Intelligent Production Organizing system) which I created for my personal use in one of my previous jobs as a Process Engineer. To fully understand what is it for, one must have knowledge of how the IPOsystem works. Long story short, one of the uses of the system is creating product schemas for production. It\'s good for mass production, but in the company where I\'ve been working there was mainly unit production and it made the workflow in IPOsystem much slower.
            <br><br>
            The app provides several data grids, forms and vast amount of options to input, edit and delete data. It also allows importing data from xls/xlsx files and folder content. In the end, when the project (production schema) is correctly finished, the app exports all the data to xlsx file with appropriate structure, which can be imported to the IPOsystem, creating a product schema, ready for production.
            <br><br>
            Some screenshots from the app below:`,
            status: 'closed',
            tech: 'C#, WPF',
            github: '',
            img: ['https://drive.google.com/uc?export=view&id=1JWgsu1aoit5zWJpEtFB8jVeXJTUpDohg', 'https://drive.google.com/uc?export=view&id=1nwJY9Bj1L1YoiyQseOMHvhzS4XOVU4pT', 'https://drive.google.com/uc?export=view&id=1558Bo-cApmcMRpi4KTpDpGOJnmBTQ1C7'],
            show: true
        },
        {
            projectName: 'Battleship',
            description: 'Battleship game written in JS, final project in the CS50\'s Introduction to Computer Science course',
            details: `Battleship is a commonly known board game - in this case, a browser game. The rules are simple: there are 2 players, each of them has a 10x10 grid. Each player places a fixed number of ships of different sizes. Players make their moves in turns: pick one of opponent\'s cells and hopefully hit the ship. Game is over when one player loses all ships.
            <br><br>
            The game was created as a final project in Harvard's CS50's Introduction to Computer Science course. It was built with HTML, CSS and JavaScript.`,
            status: 'closed',
            tech: 'HTML, CSS, JavaScript',
            github: 'https://github.com/arekjg/battleship_js',
            img: ['https://raw.githubusercontent.com/arekjg/battleship_js/main/screens/s1.png', 'https://raw.githubusercontent.com/arekjg/battleship_js/main/screens/s4.png'],
            show: true
        },
        {
            projectName: 'GitHubStats',
            description: 'Console .NET app that communicates with GitHub API and provides user statistics to be included in README file',
            details: `GitHubStats is a console .NET app that communicates with GitHub API in order to get some user data like name, date of joining, number of public and private repositories, share of programming languages used in all (public and private) repositories, number of contributions per year, etc.
            <br><br>
            Then, acquired data is used to create graphs using Python library Matplotlib. Created picture can be used in README file in GitHub profile.
            <br><br>
            The app is currently under development.`,
            status: 'in development',
            tech: 'C#, Python',
            github: '',
            img: [],
            show: true
        },
        {
            projectName: 'ActivityManager',
            description: 'WPF app for adding, deleting and viewing data from SQL database.',
            details: 'long description of an application',
            status: 'in development',
            tech: 'C#, WPF, MS SQL, EFCore',
            github: '',
            img: [],
            show: false
        }
    ];
}

function renderCards(data) {
    const cardContainer = document.getElementsByClassName('projects-container')[0];

    data.forEach((card) => {
        if (card.show) {
            const cardElement = document.createElement('div');
            cardElement.classList.add('card');
            cardElement.innerHTML = `
                <h2>${card.projectName}</h2>
                <p>${card.description}</p>
                <p id="tech">Status: <strong>${card.status}</strong><br>Tech: <strong>${card.tech}</strong></p>
                <p id="det"> click to see details </p>
            `;
            cardElement.onclick = function () {
                animate_expanded_card();
                load_expanded_content(card);
            };
            cardContainer.appendChild(cardElement);
        }
    });
}

renderCards(cardsData);


function animate_expanded_card() {
    const expandedCard = document.getElementById("expanded-card");
    const sideContent = document.getElementById("side-content");
    const mainContent = document.getElementById("main-content");
    let delay = 700;
    expandedCard.style.visibility = "visible";
    sideContent.style.visibility = "hidden";
    mainContent.style.visibility = "hidden";
    anime({
        targets: '#expanded-card',
        scale: [0,1],
        opacity: [0,1],
        easing: "easeOutQuad",
        duration: delay
    });
}

function load_expanded_content(card) {
    const expandedCard = document.getElementById("expanded-card");
    expandedCard.innerHTML = `
        <h1 onclick="close_expand()"></h1>
        <h2>${card.projectName}</h2>
        <p>${card.details}</p>`;

    if (card.github !== '') {
        expandedCard.innerHTML += `<p><span class="link"><a href="${card.github}" target="_blank">GITHUB REPOSITORY</a></span></p>`;
    }

    card.img.forEach((image) => {
        expandedCard.innerHTML += `<p><img src="${image}"></p>`;
    })
    }
    
function close_expand() {
    const expandedCard = document.getElementById("expanded-card");
    const sideContent = document.getElementById("side-content");
    const mainContent = document.getElementById("main-content");
    let delay = 700;
    expandedCard.style.transition = "cubic-bezier(0, 2.28, 0.95, 0.69) 5s";
    expandedCard.style.webkitTransition = "cubic-bezier(0, 2.28, 0.95, 0.69) 5s";
    expandedCard.style.visibility = "hidden";
    sideContent.style.visibility = "visible";
    mainContent.style.visibility = "visible";
    anime({
        targets: '#expanded-card',
        scale: [1,0],
        opacity: [1,0],
        easing: "easeOutQuad",
        duration: delay
    });
    setTimeout(() => {
        expandedCard.style.transition = "cubic-bezier(0, 2.28, 0.95, 0.69) 0.7s";
        expandedCard.style.webkitTransition = "cubic-bezier(0, 2.28, 0.95, 0.69) 0.7s";
    }, delay);
}